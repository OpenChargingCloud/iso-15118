/*
 * HSRM Wallbox API
 * This REST-API serves as a interface to a ISO-15118 SECC Server for vehicle to grid communication between an electric vehicle and a charging station. Over this API new charging sessions can be created and controlled. The API propeses methods to control the charging parameters during a charging session.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: fabian.birk@student.hs-rm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.v2gclarity.risev2g.secc.wallboxServerEndpoint.rest.openapi.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * OfferedServices
 */
@JsonPropertyOrder({
  OfferedServices.JSON_PROPERTY_ENERGY_TRANSFER_MODES,
  OfferedServices.JSON_PROPERTY_PAYMENT_OPTIONS,
  OfferedServices.JSON_PROPERTY_VALUE_ADDED_SERVICES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2021-03-13T10:53:55.059056300+01:00[Europe/Berlin]")
public class OfferedServices   {
  /**
   * Gets or Sets energyTransferModes
   */
  public enum EnergyTransferModesEnum {
    AC_SINGLE_PHASE_CORE("AC_SINGLE_PHASE_CORE"),
    
    AC_THREE_PHASE_CORE("AC_THREE_PHASE_CORE"),
    
    DC_CORE("DC_CORE"),
    
    DC_EXTENDED("DC_EXTENDED"),
    
    DC_COMBO_CORE("DC_COMBO_CORE"),
    
    DC_UNIQUE("DC_UNIQUE");

    private String value;

    EnergyTransferModesEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EnergyTransferModesEnum fromValue(String value) {
      for (EnergyTransferModesEnum b : EnergyTransferModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ENERGY_TRANSFER_MODES = "energy_transfer_modes";
  @JsonProperty(JSON_PROPERTY_ENERGY_TRANSFER_MODES)
  private List<EnergyTransferModesEnum> energyTransferModes = new ArrayList<EnergyTransferModesEnum>();

  /**
   * Gets or Sets paymentOptions
   */
  public enum PaymentOptionsEnum {
    CONTRACT("CONTRACT"),
    
    EXTERNAL_PAYMENT("EXTERNAL_PAYMENT");

    private String value;

    PaymentOptionsEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentOptionsEnum fromValue(String value) {
      for (PaymentOptionsEnum b : PaymentOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_OPTIONS = "payment_options";
  @JsonProperty(JSON_PROPERTY_PAYMENT_OPTIONS)
  private List<PaymentOptionsEnum> paymentOptions = null;

  public static final String JSON_PROPERTY_VALUE_ADDED_SERVICES = "value_added_services";
  @JsonProperty(JSON_PROPERTY_VALUE_ADDED_SERVICES)
  private List<Object> valueAddedServices = null;

  public OfferedServices energyTransferModes(List<EnergyTransferModesEnum> energyTransferModes) {
    this.energyTransferModes = energyTransferModes;
    return this;
  }

  public OfferedServices addEnergyTransferModesItem(EnergyTransferModesEnum energyTransferModesItem) {
    this.energyTransferModes.add(energyTransferModesItem);
    return this;
  }

  /**
   * Get energyTransferModes
   * @return energyTransferModes
   **/
  @JsonProperty("energy_transfer_modes")
  @ApiModelProperty(required = true, value = "")
  @NotNull 
  public List<EnergyTransferModesEnum> getEnergyTransferModes() {
    return energyTransferModes;
  }

  public void setEnergyTransferModes(List<EnergyTransferModesEnum> energyTransferModes) {
    this.energyTransferModes = energyTransferModes;
  }

  public OfferedServices paymentOptions(List<PaymentOptionsEnum> paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  public OfferedServices addPaymentOptionsItem(PaymentOptionsEnum paymentOptionsItem) {
    if (this.paymentOptions == null) {
      this.paymentOptions = new ArrayList<PaymentOptionsEnum>();
    }
    this.paymentOptions.add(paymentOptionsItem);
    return this;
  }

  /**
   * Get paymentOptions
   * @return paymentOptions
   **/
  @JsonProperty("payment_options")
  @ApiModelProperty(value = "")
  
  public List<PaymentOptionsEnum> getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(List<PaymentOptionsEnum> paymentOptions) {
    this.paymentOptions = paymentOptions;
  }

  public OfferedServices valueAddedServices(List<Object> valueAddedServices) {
    this.valueAddedServices = valueAddedServices;
    return this;
  }

  public OfferedServices addValueAddedServicesItem(Object valueAddedServicesItem) {
    if (this.valueAddedServices == null) {
      this.valueAddedServices = new ArrayList<Object>();
    }
    this.valueAddedServices.add(valueAddedServicesItem);
    return this;
  }

  /**
   * Get valueAddedServices
   * @return valueAddedServices
   **/
  @JsonProperty("value_added_services")
  @ApiModelProperty(value = "")
  
  public List<Object> getValueAddedServices() {
    return valueAddedServices;
  }

  public void setValueAddedServices(List<Object> valueAddedServices) {
    this.valueAddedServices = valueAddedServices;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferedServices offeredServices = (OfferedServices) o;
    return Objects.equals(this.energyTransferModes, offeredServices.energyTransferModes) &&
        Objects.equals(this.paymentOptions, offeredServices.paymentOptions) &&
        Objects.equals(this.valueAddedServices, offeredServices.valueAddedServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(energyTransferModes, paymentOptions, valueAddedServices);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferedServices {\n");
    
    sb.append("    energyTransferModes: ").append(toIndentedString(energyTransferModes)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    valueAddedServices: ").append(toIndentedString(valueAddedServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

